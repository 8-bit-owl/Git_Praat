function Y = outerEarConversion(X,fX,transducer)
% This function applies an outer ear transfer function to power spectrum X with bin frequencies fX.
% The conversion is between a free-field frontal incident source, or a headphone/earphone, and the
% ear drum.  Linear interpolation/extrapolation is used to determine transfer function gain at log
% frequencies in log10(fX).
%
% Input:
%    X -- Nx1 real vector, power units, power spectrum
%    fX -- Nx1 real vector, Hz, frequencies of power spectrum
%    transducer -- string, transducer type: ['freefield'],'er2'
% Output:
%    Y -- Nx1 real vector, power units, scaled power spectrum
%
% Reference:
% [1] Shaw, E. A. G., "Transformation of sound pressure level from the free field to the eardrum in
% the horizontal plane," JASA vol. 56(6), pp.1848-1861, 1975
% [2] Shaw, E. A. G. and M. M. Vaillancourt, "Transformation of sound-pressure level from the free
% field to the eardrum presented in numerical form," JASA vol. 78(3), pp. 1120-1123, 1985

% Mark Skowronski, February 25, 2013

% Check inputs:
if nargin<3,
   transducer = 'freefield';
end;

% Get reference parameters:
[X0,f0] = getReference(transducer);

% Linear interpolate middle ear power spectrum at fX, note: log frequency scale:
logfX = log10(fX);
logfX(fX==0) = 1; % dummy value, gain replaced below
HdB = interp1(log10(f0),X0,logfX,'linear','extrap'); % dB
H = 10.^(HdB/10); % power units

% Account for zeros in fX:
H(fX==0) = 0;

% Scale power spectrum in X by middle ear:
Y = H.*X;

return;


function [X0,f0] = getReference(transducer)
% This function returns reference gain/frequency vectors according to transducer type.
% Input:
%    transducer -- string, transducer type: ['freefield'],'er2'
% Output:
%    X0 -- Mx1 vector, dB, gain at M frequencies
%    f0 -- Mx1 vector, Hz, frequency of gain transfer function

% Get reference according to transducer type:
switch lower(transducer),
   case 'er2'
      [X0,f0] = reference_ER2;
   otherwise % freefield
      [X0,f0] = reference_freefield;
end;

return;


function [X0,f0] = reference_freefield()
% This function specifies the transfer function from free-field, frontal incidence to the eardrum.
% From Shaw and Vaillancourt [2], Tables 1-3:
% Output:
%    X0 -- Mx1 vector, dB, gain at M frequencies
%    f0 -- Mx1 vector, Hz, frequency of gain transfer function
% Note: 20 Hz and 100 Hz added.

temp = [...
0.02  0;...
0.1   0;...
0.2	0.5; ...
0.25	1; ...
0.3	1.3; ...
0.32	1.4; ...
0.4	1.5; ...
0.5	1.8; ...
0.6	2.3; ...
0.63	2.4; ...
0.7	2.8; ...
0.8	3.1; ...
0.9	3; ...
1	   2.6; ...
1.2	2.7; ...
1.25	3; ...
1.4	4.1; ...
1.6	6.1; ...
1.8	9; ...
2	   12; ...
2.3	15.9; ...
2.5	16.8; ...
2.7	16.8; ...
2.9	15.8; ...
3	   15.4; ...
3.2	14.9; ...
3.5	14.7; ...
4	   14.3; ...
4.5	12.8; ...
5	   10.7; ...
5.5	8.9; ...
6	   7.3; ...
6.3	6.4; ...
6.5	5.8; ...
7	   4.3; ...
7.5	3.1; ...
8	   1.8; ...
8.5	0.5; ...
9	  -0.6; ...
9.5  -1.7; ...
10	  -1.7; ...
10.5	2.5; ...
11	   6.8; ...
11.5	8.4; ...
12	   8.5];

f0 = temp(:,1)*1e3; % convert from kHz to Hz
X0 = temp(:,2); % dB

return;


function [X0,f0] = reference_ER2()
% This function specifies the transfer function of the Etymotic ER2 insert earphones to the eardrum.
% Data from Rahul's code.
% Output:
%    X0 -- Mx1 vector, dB, gain at M frequencies
%    f0 -- Mx1 vector, Hz, frequency of gain transfer function

temp = [...
1	 -50;...
80	 -15.3;...
100	2.7;...
200	0.4;...
400  -1;...
500	0.1;...
600	0.9;...
1000	0;...
1200 -0.6;...
1600 -0.4;...
2000 -0.2;...
3200	0;...
5000 -0.3;...
6400	-0.1;...
10000	0.5;...
12000 -2;...
16000 1.5];

f0 = temp(:,1); % Hz
X0 = temp(:,2); % dB

return;



